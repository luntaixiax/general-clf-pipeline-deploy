version: '3.8'
services:
  data_warehouse:
    image: clickhouse/clickhouse-server
    container_name: clickhouse
    ports:
      - 9001:9000
      - 8123:8123
    volumes:
      - dw-clickhouse-volume:/var/lib/clickhouse:z
      #- ${CH_STATIC_FOLDER:-./docker-volume-mapping/clickhouse/user_files}:/var/lib/clickhouse/user_files:z
      - ${CH_CONFIG_FOLDER:-./configs/clickhouse}/users.xml:/etc/clickhouse-server/users.d/users.xml
      - ${CH_CONFIG_FOLDER:-./configs/clickhouse}/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ${CH_CONFIG_FOLDER:-./configs/clickhouse}/obj_storage.xml:/etc/clickhouse-server/config.d/obj_storage.xml
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: |
        wget --no-verbose --tries=1 --spider http://localhost:8123 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  nosql_storage:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
      # mongodb have 2 mount points
      - nosql-mongo-db-volume:/data/db
      - nosql-mongo-conf-volume:/data/configdb
    env_file:
    - path: ./configs/secrets/mongo.env
      required: true
    healthcheck:
      test: |
        echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 60s
      timeout: 10s
      retries: 5

  mongodb_admin:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    env_file:
    - path: ./configs/secrets/mongo.env
      required: true

  optuna_storage:
    image: mysql:latest
    container_name: mysql
    volumes:
      - optuna-mysql-volume:/var/lib/mysql
    env_file:
    - path: ./configs/secrets/mysql.env
      required: true
    ports:
      - 3306:3306
    command:
      --log-error-verbosity=1
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD']
      #test: ["CMD", "whoami"]
      interval: 10s
      retries: 5
      start_period: 5s

  mlflow_backend_store:
    image: postgres:13
    env_file:
    - path: ./configs/secrets/mlflow.env
      required: true
    ports:
      - "5432:5432"
    volumes:
      - mlflow-pg-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$$POSTGRES_USER"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  mlflow_tracking_server:
    restart: always
    build: ./mlflow
    #image: mlflow_server
    container_name: mlflow_server
    ports:
      - "5000:5000"
    env_file:
    - path: ./configs/secrets/mlflow.env
      required: true
    # as we are using env_file, we need to 
    # - use $$ instead of $, otherwise compose will not have access
    # - and need to use bash -c to wrap the command, otherwise the compose will not render it
    command: >
      bash -c "mlflow server \
      --backend-store-uri postgresql://$$POSTGRES_USER:$$POSTGRES_PASSWORD@mlflow_backend_store:5432/$$POSTGRES_DB \
      --host 0.0.0.0 \
      --serve-artifacts \
      --artifacts-destination s3://$$MLFLOW_BUCKET_NAME"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  dw-clickhouse-volume:
    driver_opts:
      type: "nfs"
      o: "addr=${NFS_HOST},nolock,rw,soft,nfsvers=4"
      device: ":${NFS_VOLUME_DW_CLICKHOUSE}"
  
  nosql-mongo-db-volume:
    driver_opts:
      type: "nfs"
      o: "addr=${NFS_HOST},nolock,rw,soft,nfsvers=4"
      device: ":${NFS_VOLUME_NOSQL_MONGO_DB}"
  
  nosql-mongo-conf-volume:
    driver_opts:
      type: "nfs"
      o: "addr=${NFS_HOST},nolock,rw,soft,nfsvers=4"
      device: ":${NFS_VOLUME_NOSQL_MONGO_CONF}"

  mlflow-pg-volume:
    driver_opts:
      type: "nfs"
      o: "addr=${NFS_HOST},nolock,rw,soft,nfsvers=4"
      device: ":${NFS_VOLUME_MLFLOW_PG}"
 
  optuna-mysql-volume:
    driver_opts:
      type: "nfs"
      o: "addr=${NFS_HOST},nolock,rw,soft,nfsvers=4"
      device: ":${NFS_VOLUME_OPTUNA_MYSQL}"